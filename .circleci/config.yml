# Udacity DevOps program Capstone project.
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.4.0

executors:
  docker:
    docker:
      - image: docker
  python:
    docker:
      - image: python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments <<parameters.workflow_id>>
          when: <<parameters.event>>
          command: |
            eksctl delete cluster --name e-capstone-<<parameters.workflow_id>>

jobs:
  lint:
    executor: python
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install --no-cache-dir Flask==1.1.2
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            hadolint Dockerfile

  build:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build docker image, tag it and push it to docker hub.
          command: |
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASS}
            docker build -t eslam2017/e-capstone:${CIRCLE_WORKFLOW_ID:0:7} .
            docker push eslam2017/e-capstone:${CIRCLE_WORKFLOW_ID:0:7}
            docker tag eslam2017/e-capstone:${CIRCLE_WORKFLOW_ID:0:7} eslam2017/e-capstone:latest
            docker push eslam2017/e-capstone:latest

  deploy_eks_cluster:
    executor: aws
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install dependencies.
          command: |
            yum -y install tar gzip curl
            whoami
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version

            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin
            kubectl version --short --client
      - run:
          name:  Get old cluster name.
          command: |
            OLD_CLUSTER=$(eksctl get cluster | grep -I "e-capstone*" | awk '{print $1}')
            if [ "$?" -ne 0 ]
            then
                echo "there is no cluster with this name."
                exit 0
            else
                echo ${OLD_CLUSTER}
                curl -H "Content-Type: text/plain" -H "token: d60fa246-3f88-4ac8-b143-a5ecd64f05f4" --request PUT --data "${OLD_CLUSTER}" https://api.memstash.io/values/OLD_CLUSTER_NAME
            fi
            
      - run:
          name: Creating the EKS cluster.
          command: |
            kubectl version --short --client
            # eksctl create cluster --name e-capstone-${CIRCLE_WORKFLOW_ID:0:7} --fargate --asg-access
            eksctl create cluster \
                    --name e-capstone-${CIRCLE_WORKFLOW_ID:0:7} \
                    --tags "Name=e-capstone-${CIRCLE_WORKFLOW_ID:0:7}" \
                    --with-oidc \
                    --nodegroup-name e-capstone-${CIRCLE_WORKFLOW_ID:0:7} \
                    --node-type t2.micro\
                    --node-volume-size 30
            kubectl get nodes
            pwd && ls -la && ls -la /root/
            # cat ~/.kube/config
            cp -r ~/.kube/ .
            # mkdir .kube/ && touch .kube/config            
      - persist_to_workspace:
          root: ~/
          paths:
            - app
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  deploy_k8s_app:
    executor: aws
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install dependencies.
          command: |
            yum -y install tar gzip curl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin
            kubectl version --short --client
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy the e-capstne app to the EKS cluster.
          command: |
            cat ~/app/.kube/config
            sed -i "s/IMAGE_TAG/${CIRCLE_WORKFLOW_ID:0:7}/g" .circleci/k8s-files/e-capstone.yml
            kubectl --kubeconfig ~/app/.kube/config apply -f .circleci/k8s-files/e-capstone.yml
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  test_application:
      - checkout
      - run:
          name: Install dependencies.
          command: |
            yum -y install tar gzip curl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin
            kubectl version --short --client
      - attach_workspace:
          at: ~/
      - run:
          name: Wait for service to be ready
          command: |
            kubectl get pods
            kubectl get services
            sleep 30
            for attempt in {1..20}; do
              EXTERNAL_IP=$(kubectl get service e-capstone | awk '{print $4}' | tail -n1)
              echo "Checking external IP: ${EXTERNAL_IP}"
              if [ -n "${EXTERNAL_IP}" ] && [ -z $(echo "${EXTERNAL_IP}" | grep "pending") ]; then
                break
              fi
              echo "Waiting for external IP to be ready: ${EXTERNAL_IP}"
              sleep 10
            done
            sleep 180
            curl -s --retry 10 "http://${EXTERNAL_IP}" | grep "e-capstone"

  cleanup:
      - checkout
      - run:
          name: Install dependencies.
          command: |
            yum -y install tar gzip curl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin
            kubectl version --short --client
      - attach_workspace:
          at: ~/
      - run:
          name: Wait for service to be ready
          command: |
            OLD_CLUSTER_NAME=`curl -H "token: d60fa246-3f88-4ac8-b143-a5ecd64f05f4" --request GET https://api.memstash.io/values/OLD_CLUSTER_NAME`
            echo ${OLD_CLUSTER_NAME} | grep "e-capstone"
            if [ "$?" -ne 0 ]
            then
                echo "there is no cluster with this name."
                exit 0
            else
                eksctl delete cluster ${OLD_CLUSTER_NAME}  
            fi

workflows:
  e-capstone-deployment:
    jobs:
      - lint
      - build:
          requires:
            - "lint"
      - deploy_eks_cluster:
          requires:
            - "build"
      - deploy_k8s_app:
          requires:
            - "deploy_eks_cluster"
      - test_application:
          requires:
            - "deploy_k8s_app"
      - cleanup:
          requires:
            - "test_application"