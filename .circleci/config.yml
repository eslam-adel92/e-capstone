# Udacity DevOps program Capstone project.
version: 2.1
orbs:
  aws-eks: circleci/aws-eks@1.0.3
  kubernetes: circleci/kubernetes@0.4.0

executors:
  docker:
    docker:
      - image: docker
  python:
    docker:
      - image: python:3.7.3-stretch
  aws:
    docker:
      - image: amazon/aws-cli

commands:
  destroy_environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments <<parameters.workflow_id>>
          when: <<parameters.event>>
          command: |
            eksctl delete cluster --name e-capstone-<<parameters.workflow_id>>

jobs:
  lint:
    executor: python
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install --no-cache-dir Flask==1.1.2
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
                chmod +x /bin/hadolint
      - run:
          name: run lint
          command: |
            hadolint Dockerfile

  build:
    machine: true
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Build docker image, tag it and push it to docker hub.
          command: |
            docker login -u ${DOCKERHUB_USERNAME} -p ${DOCKERHUB_PASS}
            docker build -t eslam2017/e-capstone:${CIRCLE_WORKFLOW_ID:0:7} .
            docker push eslam2017/e-capstone:${CIRCLE_WORKFLOW_ID:0:7}
            docker tag eslam2017/e-capstone:${CIRCLE_WORKFLOW_ID:0:7} eslam2017/e-capstone:latest
            docker push eslam2017/e-capstone:latest

  deploy_eks_cluster:
    executor: aws
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install dependencies.
          command: |
            yum -y install tar gzip curl
            whoami
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version

            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin
            kubectl version --short --client
      - run:
          name: Creating the EKS cluster.
          command: |
            kubectl version --short --client
            eksctl create cluster --name e-capstone-${CIRCLE_WORKFLOW_ID:0:7} --fargate --asg-access
            kubectl get nodes
            pwd && ls -la && ls -la /root/
            # cat ~/.kube/config
            cp -r ~/.kube/ .
            # mkdir .kube/ && touch .kube/config            
      - persist_to_workspace:
          root: ~/
          paths:
            - app
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail


  deploy_k8s_app:
    executor: aws
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Install dependencies.
          command: |
            yum -y install tar gzip curl
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            mv /tmp/eksctl /usr/local/bin
            eksctl version
            curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mv ./kubectl /usr/local/bin
            kubectl version --short --client
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy the e-capstne app to the EKS cluster.
          command: |
            cat ~/app/.kube/config
            sed -i 's/IMAGE_TAG/${CIRCLE_WORKFLOW_ID:0:7}/g' .circleci/k8s-files/e-capstone.yml
            kubectl --kubconfig ~/app/.kube/config apply -f .circleci/k8s-files/e-capstone.yml
      - destroy_environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
          event: on_fail

  # create-deployment:
  #   executor: aws-eks/python3
  #   parameters:
  #     cluster-name:
  #       description: |
  #         Name of the EKS cluster
  #       type: string
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: ~/
  #     - run: 
  #         name: Install dependencies.
  #         command: |
  #           # pwd && ls -la . && ls -la ~/app/
  #           curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
  #           sudo mv /tmp/eksctl /usr/local/bin
  #           eksctl version
  #           curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.18.9/2020-11-02/bin/linux/amd64/kubectl
  #           chmod +x ./kubectl
  #           sudo mv ./kubectl /usr/local/bin
  #           kubectl version --short --client
  #           cat ~/app/.kube/config
  #           sed -i 's/IMAGE_TAG/${CIRCLE_WORKFLOW_ID:0:7}/' .circleci/k8s-files/e-capstone.yml
  #     - aws-eks/update-kubeconfig-with-authenticator:
  #         cluster-name: << parameters.cluster-name >>
  #         install-kubectl: true
  #         kubeconfig-file-path: "~/app/.kube/config"
  #     - kubernetes/create-or-update-resource:
  #         resource-file-path: ".circleci/k8s-files/e-capstone.yml"
  #         # resource-name: "e-capstone"
  #         get-rollout-status: true
  #         show-kubectl-command: true
  #     - destroy_environment:
  #         workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
  #         event: on_fail


workflows:
  e-capstone-deployment:
    jobs:
      - lint
      - build:
          requires:
            - "lint"
      - deploy_eks_cluster:
          requires:
            - "build"
      - deploy_k8s_app:
          requires:
            - "deploy_eks_cluster"
      # - create-deployment:
      #     cluster-name: e-capstone-${CIRCLE_WORKFLOW_ID:0:7}
      #     requires:
      #       - "deploy_eks_cluster"
            # - "build"
      # - aws-eks/update-container-image:
      #     cluster-name: e-capstone-${CIRCLE_WORKFLOW_ID:0:7}
      #     resource-name: "e-capstone"
      #     container-image-updates: "e-capstone=e-capstone-${CIRCLE_WORKFLOW_ID:0:7}"
      #     record: true
      #     requires:
      #       - "create-deployment"


# aws eks update-kubeconfig --region us-west-2 --name help --kubeconfig config-2

# eksctl create cluster --name my-cluster --region us-west-2 --fargate